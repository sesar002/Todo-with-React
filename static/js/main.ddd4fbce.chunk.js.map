{"version":3,"sources":["constants.js","Task.js","NewTask.js","FilterComponent.js","TodoMain.js","App.js","index.js"],"names":["filters","routs","Task","task","onDelete","onCompleteToggle","stil","completed","textDecoration","className","style","onClick","id","text","NewTask","props","handleInputChange","event","currentText","target","value","setState","inputText","handleSubmit","preventDefault","undefined","state","trimano","trim","length","minInputLength","onAdd","inpuText","onSubmit","this","type","onChange","React","Component","defaultProps","maxInputLength","FIlterComponent","getStyle","forFilter","filterProp","backgroundColor","color","to","App","handleTaskAdd","newTaskText","newId","maxId","newTasksList","tasks","handleDelete","taskId","newList","filter","handleCompleteToggle","tasksCopy","tasksToCompleteToggle","setFilter","filterToSet","getFilteredOnes","filteredTasks","map","taskItem","path","exact","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.ddd4fbce.chunk.js","sourcesContent":["export const filters = {\r\n  ALL: 'ALL',\r\n  COMPLETED: 'COMPLETED',\r\n  NOT_COMPLETED: 'NOT_COMPLETED'\r\n}\r\nexport const routs = {\r\n  ALL: '/ALL',\r\n  COMPLETED: '/COMPLETED',\r\n  NOT_COMPLETED: '/NOT_COMPLETED'\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\n\r\nexport default function Task({task, onDelete, onCompleteToggle}){\r\n  const deleteItem = () => {\r\n    onDelete(task.id);\r\n  }\r\n\r\n  const changeCompleted = () => {\r\n    onCompleteToggle(task.id);\r\n  }\r\n\r\n  let stil = {};\r\n\r\n  if(task.completed){\r\n    stil = {textDecoration: 'line-through'};\r\n  }\r\n\r\n  return (\r\n    <div className='divtask'>\r\n      <span className='span' style={stil} onClick={changeCompleted}>{task.text}</span>\r\n      <button className='button' onClick={deleteItem} >X</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nTask.propTypes = {\r\n  task: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    text: PropTypes.string,\r\n    completed: PropTypes.bool\r\n  }),\r\n  onDelete: PropTypes.func,\r\n  onCompleteToggle: PropTypes.func\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\n\r\nexport default class NewTask extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      inpuText: ''\r\n    }\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const currentText = event.target.value;\r\n    this.setState({inputText: currentText});\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if(this.state.inputText !== undefined){\r\n      const trimano = this.state.inputText.trim();\r\n      if(trimano.length < this.props.minInputLength){\r\n        return;\r\n      }\r\n\r\n      this.props.onAdd(trimano);\r\n      this.setState({inputText: ''});\r\n    }else{\r\n      return;\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <form className='form' onSubmit={this.handleSubmit}>\r\n        <input className='input' type=\"text\" value={this.state.inputText} onChange={this.handleInputChange} />\r\n        <input className='button' type=\"submit\" value=\"Add\" />\r\n      </form>\r\n    )\r\n  }\r\n};\r\n\r\nNewTask.propTypes = {\r\n  maxInputLength: PropTypes.number,\r\n  onAdd: PropTypes.func\r\n};\r\n\r\nNewTask.defaultProps = {\r\n  maxInputLength: 3,\r\n}","import React from 'react';\r\nimport {filters, routs} from './constants';\r\nimport './App.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class FIlterComponent extends React.Component{\r\n  \r\n  getStyle = (forFilter) => {\r\n    let stilBtn = {backgroundColor: '#ababab', color: 'black'};\r\n    return this.props.filterProp === forFilter ? stilBtn : {};\r\n  }\r\n  \r\n\r\n  render(){\r\n\r\n    return(\r\n      <p className='filter-btns'>\r\n        <Link to={routs.ALL}>\r\n          <button\r\n            className='linkbtn'\r\n            style={this.getStyle(filters.ALL)}>All\r\n          </button>\r\n        </Link>\r\n        <Link to={routs.COMPLETED}>\r\n          <button \r\n            className='linkbtn'\r\n            style={this.getStyle(filters.COMPLETED)}>Completed\r\n          </button>\r\n        </Link>\r\n        <Link to={routs.NOT_COMPLETED}>\r\n          <button \r\n            className='linkbtn'\r\n            style={this.getStyle(filters.NOT_COMPLETED)}>Not completed\r\n          </button>\r\n        </Link>\r\n      </p>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport Task from './Task';\r\nimport NewTask from './NewTask';\r\nimport {filters} from './constants'\r\nimport FIlterComponent from './FilterComponent';\r\nimport './App.css';\r\n\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      tasks: [\r\n        {id: 1, text: 'operi suÄ‘e', completed: false, },\r\n        {id: 2, text: 'odmori', completed: false, }\r\n      ],\r\n      maxId: 2,\r\n      minInputLength: 3\r\n    }\r\n  }\r\n\r\n  handleTaskAdd = (newTaskText) => {\r\n    const newId = this.state.maxId + 1;\r\n    const newTask = {id: newId, text: newTaskText, completed: false};\r\n\r\n    const newTasksList = [newTask, ...this.state.tasks];\r\n    this.setState({tasks: newTasksList, maxId: newId});\r\n  }\r\n\r\n  handleDelete = (taskId) => {\r\n    const tasksCopy = [...this.state.tasks]\r\n    const newList = tasksCopy.filter((task) => task.id !== taskId);\r\n\r\n    this.setState({tasks: newList});\r\n  }\r\n\r\n  handleCompleteToggle = (taskId) => {\r\n    const tasksCopy = [...this.state.tasks]\r\n    const tasksToCompleteToggle = tasksCopy.filter((task) => task.id === taskId);\r\n    if(tasksToCompleteToggle.length > 0 ){\r\n      const task = tasksToCompleteToggle[0];\r\n      if(task.completed){\r\n        task.completed = false;\r\n      }else {\r\n        task.completed = true;\r\n      }\r\n      // task.completed = !task.completed\r\n\r\n      this.setState({tasks: tasksCopy});\r\n    }\r\n  }\r\n\r\n  setFilter = (filterToSet) =>{\r\n    this.setState({filter: filterToSet})\r\n  }\r\n\r\n  getFilteredOnes = () => {\r\n    switch(this.props.filter){\r\n      case filters.COMPLETED:\r\n        return this.state.tasks.filter(task => task.completed === true);\r\n      case filters.NOT_COMPLETED:\r\n        return this.state.tasks.filter(task => task.completed === false);\r\n      default:\r\n        return this.state.tasks\r\n    }\r\n  }\r\n  \r\n  render(){\r\n    const filteredTasks = this.getFilteredOnes();\r\n\r\n    return (\r\n      <div className='container'>\r\n        <h1 className='heading'>What To Do?</h1>\r\n        <FIlterComponent filterProp={this.props.filter}/>\r\n        <div className='todolist'>\r\n          <NewTask minInputLength={this.state.minInputLength} onAdd={this.handleTaskAdd} />\r\n          {filteredTasks.map((taskItem) => <Task \r\n                                                key={taskItem.id} \r\n                                                task={taskItem} \r\n                                                onDelete={this.handleDelete} \r\n                                                onCompleteToggle={this.handleCompleteToggle}\r\n                                              />)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { filters, routs } from \"./constants\";\r\nimport TodoMain from \"./TodoMain\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route path={routs.ALL}>\r\n          <TodoMain filter={filters.ALL} />\r\n        </Route>\r\n        <Route path={routs.COMPLETED}>\r\n          <TodoMain filter={filters.COMPLETED} />\r\n        </Route>\r\n        <Route path={routs.NOT_COMPLETED}>\r\n          <TodoMain filter={filters.NOT_COMPLETED} />\r\n        </Route>\r\n        <Route exact path=\"/\">\r\n          <TodoMain filter={filters.ALL} />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter basename=\"/\">\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}